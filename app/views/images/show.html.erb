<h2>Image <%=h @image.ord %> of experiment “<%=h @image.experiment.name %>”</h2>

<%= form_tag(goto_images_url, :method => :get, :id => 'image_selector_form') do %>
  <%= select_tag 'id', options_for_select(@image.experiment.images.collect {|i| ["Image #{i.ord}", i.id]}, @image.id) %>
  <%= submit_tag 'Go', :name => nil %>
<% end %>

<p><%=image_tag '/experiments/' + @image.pictures.first.filename, :id => 'picture' %></p>

<canvas id="cellmask">
  Your Browser does not support HTML5 canvas.
</canvas>

<script>
  var cells = <%=@image.cells.to_json.html_safe %>

  function base64decode(data) {
    var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    // b64 does not contain = at the end because this stands for the value
    // 64 which has to be ignored. Linebreaks and any other character not listed
    // in the above list have to be ignored, too.
    var result = [];
    var pos = 0;
    data.split('').forEach(function(c) {
      var value = b64.indexOf(c);
      var i = 0;
      if (value >= 0) {
        for (i = 5; i >= 0; i --) {
          result[pos++] = ((1 << i) & value) >> i;
        }
      }
    });
    return result;
  }

  $(function() {
    var canvas = $('#cellmask');
    var picture = $('#picture');
    var p = picture.position();
    canvas.css({
      position: 'absolute',
      top: p.top + 'px',
      left: p.left + 'px',
      width: picture.width() + 'px',
      height: picture.height() + 'px'
    });
    
    var canvasCellmask = canvas.get(0);
    canvasCellmask.width = picture.width();
    canvasCellmask.height = picture.height();
    var ctxCellmask = canvasCellmask.getContext('2d');
    ctxCellmask.clearRect(0, 0, picture.width(), picture.height());

    $.each(cells, function(index, cell) {
      var mask = base64decode(cell.mask);

      // Create ImageData object of proper size).
      var imgData = ctxCellmask.createImageData(cell.width, cell.height);
      // TODO Implement color management.
      for (var k = 0; k < cell.width * cell.height; k++) {
        if (mask[k] > 0) {
          imgData.data[4*k]   = 96;
          imgData.data[4*k+1] = 0;
          imgData.data[4*k+2] = 0;
          imgData.data[4*k+3] = 128;
        }
      }

      // Draw cellmask on cellmask canvas.
      ctxCellmask.putImageData(imgData, cell.left, cell.top);
    });
  });
</script>

<p><%=link_to 'Back to experiment', experiment_url(@image.experiment.id) %></p>